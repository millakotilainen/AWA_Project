{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Milla\\\\Documents\\\\Advanced Web Applications\\\\Project\\\\client\\\\src\\\\Pages\\\\Profile\\\\ChangeEmail\\\\ChangeEmail.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Modal from \"../../../Components/Modal/Modal\";\nimport FormErrors from \"../../../Components/FormErrors/FormErrors\";\nimport Button from \"../../../Components/Button/Button\";\nimport AppContext from \"../../../Contexts/AppContext\";\nimport axios from \"axios\";\nimport validator from \"validator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ({\n  isOpen,\n  onClose\n}) {\n  // Get the 'user' and 'setUser' functions from the AppContext to access and update the user data\n  const {\n    user,\n    setUser\n  } = useContext(AppContext);\n  // State variables to manage the state of the modal and the user's email, and store any form validation errors\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [email, setEmail] = useState(user.email);\n  const [errors, setErrors] = useState([]);\n\n  // Function to handle form submission\n  const onSubmit = async event => {\n    event.preventDefault();\n    setErrors([]);\n    if (!validator.isEmail(email)) return setErrors(['Email needs to be in correct format']);else if (email === user.email) return setErrors(['New email cannot be the same as your current one']);\n\n    //const token = localStorage.getItem(\"token\");\n    const data = {\n      email,\n      userId: user._id\n    };\n    try {\n      // Make a POST request to the server's '/api/user/change-email' endpoint to update the user's email\n      await axios.post('/api/user/change-email', data);\n\n      // Update the user context with the new email\n      setUser({\n        ...user,\n        email\n      });\n      // Close the modal after successful email change\n      onClose();\n    } catch (e) {\n      setErrors([e.response.data.message]);\n    }\n  };\n  const closeModal = () => {\n    onClose();\n  };\n\n  // Update the state of the modal when the 'isOpen' prop changes\n  useEffect(() => {\n    setModalOpen(isOpen);\n  }, [isOpen]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isModalOpen,\n    onClose: closeModal,\n    title: \"Change Email\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: onSubmit,\n      children: [!!errors.length && /*#__PURE__*/_jsxDEV(FormErrors, {\n        errors: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form__label\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form__input\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Change\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"names":["React","useContext","useEffect","useState","Modal","FormErrors","Button","AppContext","axios","validator","jsxDEV","_jsxDEV","isOpen","onClose","user","setUser","isModalOpen","setModalOpen","email","setEmail","errors","setErrors","onSubmit","event","preventDefault","isEmail","data","userId","_id","post","e","response","message","closeModal","title","children","className","length","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","type"],"sources":["C:/Users/Milla/Documents/Advanced Web Applications/Project/client/src/Pages/Profile/ChangeEmail/ChangeEmail.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport Modal from \"../../../Components/Modal/Modal\";\r\nimport FormErrors from \"../../../Components/FormErrors/FormErrors\";\r\nimport Button from \"../../../Components/Button/Button\";\r\nimport AppContext from \"../../../Contexts/AppContext\";\r\nimport axios from \"axios\";\r\nimport validator from \"validator\";\r\n\r\nexport default function ({isOpen, onClose}) {\r\n    // Get the 'user' and 'setUser' functions from the AppContext to access and update the user data\r\n    const {user, setUser} = useContext(AppContext);\r\n    // State variables to manage the state of the modal and the user's email, and store any form validation errors\r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n    const [email, setEmail] = useState(user.email);\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // Function to handle form submission\r\n    const onSubmit = async event => {\r\n        event.preventDefault();\r\n        setErrors([]);\r\n        \r\n        if (!validator.isEmail(email)) return setErrors(['Email needs to be in correct format']);\r\n        else if (email === user.email) return setErrors(['New email cannot be the same as your current one']);\r\n\r\n\r\n        //const token = localStorage.getItem(\"token\");\r\n        const data = {\r\n            email,\r\n            userId: user._id\r\n        };\r\n\r\n        try {\r\n            // Make a POST request to the server's '/api/user/change-email' endpoint to update the user's email\r\n            await axios.post('/api/user/change-email', data);\r\n\r\n            // Update the user context with the new email\r\n            setUser({\r\n                ...user,\r\n                email\r\n            });\r\n            // Close the modal after successful email change\r\n            onClose();\r\n        } catch (e){\r\n            setErrors([e.response.data.message]);\r\n        }\r\n        \r\n    };\r\n\r\n    const closeModal = () => {\r\n        onClose();\r\n    };\r\n\r\n    // Update the state of the modal when the 'isOpen' prop changes\r\n    useEffect(() => {\r\n        setModalOpen(isOpen);\r\n    }, [isOpen]);\r\n\r\n    return (\r\n        <Modal isOpen={isModalOpen} onClose={closeModal} title=\"Change Email\">\r\n            <form className=\"form\" onSubmit={onSubmit}>\r\n                {!!errors.length && <FormErrors errors={errors}/>}\r\n                <div className=\"form__group\">\r\n                    <label className=\"form__label\">Email</label>\r\n                    <input className=\"form__input\" value={email} onChange={e => setEmail(e.target.value)}/>\r\n                </div>\r\n\r\n                <Button type=\"submit\">Change</Button>\r\n            </form>\r\n        </Modal>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}